####################   lr    #########################
Testing on training set:
              precision    recall  f1-score   support

         0.0      0.899     0.869     0.884      3216
         1.0      0.873     0.902     0.888      3216

    accuracy                          0.886      6432
   macro avg      0.886     0.886     0.886      6432
weighted avg      0.886     0.886     0.886      6432

auc macro 0.954
confusion matrix
[[2795  421]
 [ 314 2902]]
Testing on validation set:
              precision    recall  f1-score   support

         0.0      0.418     0.531     0.468       143
         1.0      0.935     0.901     0.918      1072

    accuracy                          0.858      1215
   macro avg      0.676     0.716     0.693      1215
weighted avg      0.874     0.858     0.865      1215

auc macro 0.829
confusion matrix
[[ 76  67]
 [106 966]]
Parameters: {'memory': None, 'steps': [('preprocess', ColumnTransformer(remainder='passthrough',
                  transformers=[('stand', StandardScaler(),
                                 [1, 16, 8, 17, 18, 19, 20, 21])],
                  verbose_feature_names_out=False)), ('model', LogisticRegression(C=6, class_weight='balanced', dual=True, max_iter=63,
                   solver='liblinear'))], 'verbose': False, 'preprocess': ColumnTransformer(remainder='passthrough',
                  transformers=[('stand', StandardScaler(),
                                 [1, 16, 8, 17, 18, 19, 20, 21])],
                  verbose_feature_names_out=False), 'model': LogisticRegression(C=6, class_weight='balanced', dual=True, max_iter=63,
                   solver='liblinear'), 'preprocess__n_jobs': None, 'preprocess__remainder': 'passthrough', 'preprocess__sparse_threshold': 0.3, 'preprocess__transformer_weights': None, 'preprocess__transformers': [('stand', StandardScaler(), [1, 16, 8, 17, 18, 19, 20, 21])], 'preprocess__verbose': False, 'preprocess__verbose_feature_names_out': False, 'preprocess__stand': StandardScaler(), 'preprocess__stand__copy': True, 'preprocess__stand__with_mean': True, 'preprocess__stand__with_std': True, 'model__C': 6, 'model__class_weight': 'balanced', 'model__dual': True, 'model__fit_intercept': True, 'model__intercept_scaling': 1, 'model__l1_ratio': None, 'model__max_iter': 63, 'model__multi_class': 'auto', 'model__n_jobs': None, 'model__penalty': 'l2', 'model__random_state': None, 'model__solver': 'liblinear', 'model__tol': 0.0001, 'model__verbose': 0, 'model__warm_start': False}
####################   lr  END   #########################
####################   knn    #########################
Testing on training set:
              precision    recall  f1-score   support

         0.0      0.898     1.000     0.946      3216
         1.0      1.000     0.886     0.939      3216

    accuracy                          0.943      6432
   macro avg      0.949     0.943     0.943      6432
weighted avg      0.949     0.943     0.943      6432

auc macro 0.999
confusion matrix
[[3216    0]
 [ 367 2849]]
Testing on validation set:
              precision    recall  f1-score   support

         0.0      0.240     0.462     0.316       143
         1.0      0.918     0.805     0.858      1072

    accuracy                          0.765      1215
   macro avg      0.579     0.633     0.587      1215
weighted avg      0.838     0.765     0.794      1215

auc macro 0.644
confusion matrix
[[ 66  77]
 [209 863]]
Parameters: {'memory': None, 'steps': [('preprocess', ColumnTransformer(remainder='passthrough',
                  transformers=[('stand', StandardScaler(),
                                 [1, 16, 8, 17, 18, 19, 20, 21])],
                  verbose_feature_names_out=False)), ('model', KNeighborsClassifier(algorithm='ball_tree', leaf_size=54, n_neighbors=2))], 'verbose': False, 'preprocess': ColumnTransformer(remainder='passthrough',
                  transformers=[('stand', StandardScaler(),
                                 [1, 16, 8, 17, 18, 19, 20, 21])],
                  verbose_feature_names_out=False), 'model': KNeighborsClassifier(algorithm='ball_tree', leaf_size=54, n_neighbors=2), 'preprocess__n_jobs': None, 'preprocess__remainder': 'passthrough', 'preprocess__sparse_threshold': 0.3, 'preprocess__transformer_weights': None, 'preprocess__transformers': [('stand', StandardScaler(), [1, 16, 8, 17, 18, 19, 20, 21])], 'preprocess__verbose': False, 'preprocess__verbose_feature_names_out': False, 'preprocess__stand': StandardScaler(), 'preprocess__stand__copy': True, 'preprocess__stand__with_mean': True, 'preprocess__stand__with_std': True, 'model__algorithm': 'ball_tree', 'model__leaf_size': 54, 'model__metric': 'minkowski', 'model__metric_params': None, 'model__n_jobs': None, 'model__n_neighbors': 2, 'model__p': 2, 'model__weights': 'uniform'}
####################   knn  END   #########################
####################   xgb    #########################
Testing on training set:
              precision    recall  f1-score   support

         0.0      0.913     0.984     0.947      3216
         1.0      0.982     0.906     0.943      3216

    accuracy                          0.945      6432
   macro avg      0.948     0.945     0.945      6432
weighted avg      0.948     0.945     0.945      6432

auc macro 0.994
confusion matrix
[[3164   52]
 [ 303 2913]]
Testing on validation set:
              precision    recall  f1-score   support

         0.0      0.415     0.615     0.496       143
         1.0      0.945     0.884     0.914      1072

    accuracy                          0.853      1215
   macro avg      0.680     0.750     0.705      1215
weighted avg      0.883     0.853     0.865      1215

auc macro 0.830
confusion matrix
[[ 88  55]
 [124 948]]
Parameters: {'memory': None, 'steps': [('preprocess', ColumnTransformer(remainder='passthrough',
                  transformers=[('stand', StandardScaler(),
                                 [1, 16, 8, 17, 18, 19, 20, 21])],
                  verbose_feature_names_out=False)), ('model', XGBClassifier(alpha=0.24680855365947124, booster='dart', eta=0.2477457170522508,
              gamma=0.054843779888438804, lambda=1.9207551518163506,
              max_depth=6, missing=nan, n_estimators=64, scale_pos_weight=0.2,
              subsample=0.75))], 'verbose': False, 'preprocess': ColumnTransformer(remainder='passthrough',
                  transformers=[('stand', StandardScaler(),
                                 [1, 16, 8, 17, 18, 19, 20, 21])],
                  verbose_feature_names_out=False), 'model': XGBClassifier(alpha=0.24680855365947124, booster='dart', eta=0.2477457170522508,
              gamma=0.054843779888438804, lambda=1.9207551518163506,
              max_depth=6, missing=nan, n_estimators=64, scale_pos_weight=0.2,
              subsample=0.75), 'preprocess__n_jobs': None, 'preprocess__remainder': 'passthrough', 'preprocess__sparse_threshold': 0.3, 'preprocess__transformer_weights': None, 'preprocess__transformers': [('stand', StandardScaler(), [1, 16, 8, 17, 18, 19, 20, 21])], 'preprocess__verbose': False, 'preprocess__verbose_feature_names_out': False, 'preprocess__stand': StandardScaler(), 'preprocess__stand__copy': True, 'preprocess__stand__with_mean': True, 'preprocess__stand__with_std': True, 'model__base_score': 0.5, 'model__booster': 'dart', 'model__colsample_bylevel': 1, 'model__colsample_bynode': 1, 'model__colsample_bytree': 1, 'model__gamma': 0.054843779888438804, 'model__learning_rate': 0.1, 'model__max_delta_step': 0, 'model__max_depth': 6, 'model__min_child_weight': 1, 'model__missing': nan, 'model__n_estimators': 64, 'model__n_jobs': 1, 'model__nthread': None, 'model__objective': 'binary:logistic', 'model__random_state': 0, 'model__reg_alpha': 0, 'model__reg_lambda': 1, 'model__scale_pos_weight': 0.2, 'model__seed': None, 'model__silent': None, 'model__subsample': 0.75, 'model__verbosity': 1, 'model__alpha': 0.24680855365947124, 'model__eta': 0.2477457170522508, 'model__lambda': 1.9207551518163506}
####################   xgb  END   #########################
