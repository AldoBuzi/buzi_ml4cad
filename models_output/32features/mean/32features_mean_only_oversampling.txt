####################   lr    #########################
Testing on training set:
              precision    recall  f1-score   support

         0.0      0.894     0.799     0.844      3494
         1.0      0.819     0.905     0.860      3494

    accuracy                          0.852      6988
   macro avg      0.856     0.852     0.852      6988
weighted avg      0.856     0.852     0.852      6988

auc macro 0.932
confusion matrix
[[2793  701]
 [ 332 3162]]
Testing on validation set:
              precision    recall  f1-score   support

         0.0      0.487     0.556     0.519       169
         1.0      0.934     0.915     0.925      1165

    accuracy                          0.870      1334
   macro avg      0.711     0.736     0.722      1334
weighted avg      0.878     0.870     0.873      1334

auc macro 0.855
confusion matrix
[[  94   75]
 [  99 1066]]
Parameters: {'memory': None, 'steps': [('preprocess', ColumnTransformer(remainder='passthrough',
                  transformers=[('stand', StandardScaler(),
                                 [1, 25, 17, 2, 26, 27, 28, 29, 30])],
                  verbose_feature_names_out=False)), ('model', LogisticRegression(C=5, class_weight='balanced', dual=True, max_iter=182,
                   solver='liblinear', warm_start=True))], 'verbose': False, 'preprocess': ColumnTransformer(remainder='passthrough',
                  transformers=[('stand', StandardScaler(),
                                 [1, 25, 17, 2, 26, 27, 28, 29, 30])],
                  verbose_feature_names_out=False), 'model': LogisticRegression(C=5, class_weight='balanced', dual=True, max_iter=182,
                   solver='liblinear', warm_start=True), 'preprocess__n_jobs': None, 'preprocess__remainder': 'passthrough', 'preprocess__sparse_threshold': 0.3, 'preprocess__transformer_weights': None, 'preprocess__transformers': [('stand', StandardScaler(), [1, 25, 17, 2, 26, 27, 28, 29, 30])], 'preprocess__verbose': False, 'preprocess__verbose_feature_names_out': False, 'preprocess__stand': StandardScaler(), 'preprocess__stand__copy': True, 'preprocess__stand__with_mean': True, 'preprocess__stand__with_std': True, 'model__C': 5, 'model__class_weight': 'balanced', 'model__dual': True, 'model__fit_intercept': True, 'model__intercept_scaling': 1, 'model__l1_ratio': None, 'model__max_iter': 182, 'model__multi_class': 'auto', 'model__n_jobs': None, 'model__penalty': 'l2', 'model__random_state': None, 'model__solver': 'liblinear', 'model__tol': 0.0001, 'model__verbose': 0, 'model__warm_start': True}
####################   lr  END   #########################
####################   svc    #########################
Testing on training set:
              precision    recall  f1-score   support

         0.0      0.820     0.615     0.703      3494
         1.0      0.692     0.865     0.769      3494

    accuracy                          0.740      6988
   macro avg      0.756     0.740     0.736      6988
weighted avg      0.756     0.740     0.736      6988

auc macro 0.840
confusion matrix
[[2148 1346]
 [ 471 3023]]
Testing on validation set:
              precision    recall  f1-score   support

         0.0      0.368     0.503     0.425       169
         1.0      0.924     0.875     0.899      1165

    accuracy                          0.828      1334
   macro avg      0.646     0.689     0.662      1334
weighted avg      0.853     0.828     0.839      1334

auc macro 0.789
confusion matrix
[[  85   84]
 [ 146 1019]]
Parameters: {'memory': None, 'steps': [('preprocess', ColumnTransformer(remainder='passthrough',
                  transformers=[('stand', StandardScaler(),
                                 [1, 25, 17, 2, 26, 27, 28, 29, 30])],
                  verbose_feature_names_out=False)), ('model', SVC(C=152, class_weight='balanced', coef0=0.7569001354287388, degree=89,
    max_iter=1600, probability=True))], 'verbose': False, 'preprocess': ColumnTransformer(remainder='passthrough',
                  transformers=[('stand', StandardScaler(),
                                 [1, 25, 17, 2, 26, 27, 28, 29, 30])],
                  verbose_feature_names_out=False), 'model': SVC(C=152, class_weight='balanced', coef0=0.7569001354287388, degree=89,
    max_iter=1600, probability=True), 'preprocess__n_jobs': None, 'preprocess__remainder': 'passthrough', 'preprocess__sparse_threshold': 0.3, 'preprocess__transformer_weights': None, 'preprocess__transformers': [('stand', StandardScaler(), [1, 25, 17, 2, 26, 27, 28, 29, 30])], 'preprocess__verbose': False, 'preprocess__verbose_feature_names_out': False, 'preprocess__stand': StandardScaler(), 'preprocess__stand__copy': True, 'preprocess__stand__with_mean': True, 'preprocess__stand__with_std': True, 'model__C': 152, 'model__break_ties': False, 'model__cache_size': 200, 'model__class_weight': 'balanced', 'model__coef0': 0.7569001354287388, 'model__decision_function_shape': 'ovr', 'model__degree': 89, 'model__gamma': 'scale', 'model__kernel': 'rbf', 'model__max_iter': 1600, 'model__probability': True, 'model__random_state': None, 'model__shrinking': True, 'model__tol': 0.001, 'model__verbose': False}
####################   svc  END   #########################
####################   knn    #########################
Testing on training set:
              precision    recall  f1-score   support

         0.0      0.866     0.984     0.921      3494
         1.0      0.981     0.848     0.910      3494

    accuracy                          0.916      6988
   macro avg      0.924     0.916     0.916      6988
weighted avg      0.924     0.916     0.916      6988

auc macro 0.992
confusion matrix
[[3438   56]
 [ 531 2963]]
Testing on validation set:
              precision    recall  f1-score   support

         0.0      0.318     0.609     0.418       169
         1.0      0.935     0.810     0.868      1165

    accuracy                          0.785      1334
   macro avg      0.626     0.710     0.643      1334
weighted avg      0.857     0.785     0.811      1334

auc macro 0.759
confusion matrix
[[103  66]
 [221 944]]
Parameters: {'memory': None, 'steps': [('preprocess', ColumnTransformer(remainder='passthrough',
                  transformers=[('stand', StandardScaler(),
                                 [1, 25, 17, 2, 26, 27, 28, 29, 30])],
                  verbose_feature_names_out=False)), ('model', KNeighborsClassifier(algorithm='ball_tree', leaf_size=11, n_neighbors=4))], 'verbose': False, 'preprocess': ColumnTransformer(remainder='passthrough',
                  transformers=[('stand', StandardScaler(),
                                 [1, 25, 17, 2, 26, 27, 28, 29, 30])],
                  verbose_feature_names_out=False), 'model': KNeighborsClassifier(algorithm='ball_tree', leaf_size=11, n_neighbors=4), 'preprocess__n_jobs': None, 'preprocess__remainder': 'passthrough', 'preprocess__sparse_threshold': 0.3, 'preprocess__transformer_weights': None, 'preprocess__transformers': [('stand', StandardScaler(), [1, 25, 17, 2, 26, 27, 28, 29, 30])], 'preprocess__verbose': False, 'preprocess__verbose_feature_names_out': False, 'preprocess__stand': StandardScaler(), 'preprocess__stand__copy': True, 'preprocess__stand__with_mean': True, 'preprocess__stand__with_std': True, 'model__algorithm': 'ball_tree', 'model__leaf_size': 11, 'model__metric': 'minkowski', 'model__metric_params': None, 'model__n_jobs': None, 'model__n_neighbors': 4, 'model__p': 2, 'model__weights': 'uniform'}
####################   knn  END   #########################
####################   adaboost    #########################
Testing on training set:
              precision    recall  f1-score   support

         0.0      0.906     0.892     0.899      3494
         1.0      0.894     0.907     0.901      3494

    accuracy                          0.900      6988
   macro avg      0.900     0.900     0.900      6988
weighted avg      0.900     0.900     0.900      6988

auc macro 0.960
confusion matrix
[[3118  376]
 [ 324 3170]]
Testing on validation set:
              precision    recall  f1-score   support

         0.0      0.495     0.544     0.518       169
         1.0      0.933     0.919     0.926      1165

    accuracy                          0.872      1334
   macro avg      0.714     0.732     0.722      1334
weighted avg      0.877     0.872     0.874      1334

auc macro 0.843
confusion matrix
[[  92   77]
 [  94 1071]]
Parameters: {'memory': None, 'steps': [('preprocess', ColumnTransformer(remainder='passthrough',
                  transformers=[('stand', StandardScaler(),
                                 [1, 25, 17, 2, 26, 27, 28, 29, 30])],
                  verbose_feature_names_out=False)), ('model', AdaBoostClassifier(learning_rate=1.1618741071985597, n_estimators=20))], 'verbose': False, 'preprocess': ColumnTransformer(remainder='passthrough',
                  transformers=[('stand', StandardScaler(),
                                 [1, 25, 17, 2, 26, 27, 28, 29, 30])],
                  verbose_feature_names_out=False), 'model': AdaBoostClassifier(learning_rate=1.1618741071985597, n_estimators=20), 'preprocess__n_jobs': None, 'preprocess__remainder': 'passthrough', 'preprocess__sparse_threshold': 0.3, 'preprocess__transformer_weights': None, 'preprocess__transformers': [('stand', StandardScaler(), [1, 25, 17, 2, 26, 27, 28, 29, 30])], 'preprocess__verbose': False, 'preprocess__verbose_feature_names_out': False, 'preprocess__stand': StandardScaler(), 'preprocess__stand__copy': True, 'preprocess__stand__with_mean': True, 'preprocess__stand__with_std': True, 'model__algorithm': 'SAMME.R', 'model__base_estimator': None, 'model__learning_rate': 1.1618741071985597, 'model__n_estimators': 20, 'model__random_state': None}
####################   adaboost  END   #########################
####################   xgb    #########################
Testing on training set:
              precision    recall  f1-score   support

         0.0      0.880     0.945     0.911      3494
         1.0      0.940     0.871     0.904      3494

    accuracy                          0.908      6988
   macro avg      0.910     0.908     0.908      6988
weighted avg      0.910     0.908     0.908      6988

auc macro 0.977
confusion matrix
[[3301  193]
 [ 451 3043]]
Testing on validation set:
              precision    recall  f1-score   support

         0.0      0.453     0.663     0.538       169
         1.0      0.948     0.884     0.915      1165

    accuracy                          0.856      1334
   macro avg      0.701     0.773     0.727      1334
weighted avg      0.885     0.856     0.867      1334

auc macro 0.867
confusion matrix
[[ 112   57]
 [ 135 1030]]
Parameters: {'memory': None, 'steps': [('preprocess', ColumnTransformer(remainder='passthrough',
                  transformers=[('stand', StandardScaler(),
                                 [1, 25, 17, 2, 26, 27, 28, 29, 30])],
                  verbose_feature_names_out=False)), ('model', XGBClassifier(alpha=0.4246715792610688, eta=0.38116393902047846,
              gamma=0.0797483704737714, lambda=0.7070515345251172, max_depth=2,
              missing=nan, n_estimators=85, scale_pos_weight=0.4,
              subsample=0.25))], 'verbose': False, 'preprocess': ColumnTransformer(remainder='passthrough',
                  transformers=[('stand', StandardScaler(),
                                 [1, 25, 17, 2, 26, 27, 28, 29, 30])],
                  verbose_feature_names_out=False), 'model': XGBClassifier(alpha=0.4246715792610688, eta=0.38116393902047846,
              gamma=0.0797483704737714, lambda=0.7070515345251172, max_depth=2,
              missing=nan, n_estimators=85, scale_pos_weight=0.4,
              subsample=0.25), 'preprocess__n_jobs': None, 'preprocess__remainder': 'passthrough', 'preprocess__sparse_threshold': 0.3, 'preprocess__transformer_weights': None, 'preprocess__transformers': [('stand', StandardScaler(), [1, 25, 17, 2, 26, 27, 28, 29, 30])], 'preprocess__verbose': False, 'preprocess__verbose_feature_names_out': False, 'preprocess__stand': StandardScaler(), 'preprocess__stand__copy': True, 'preprocess__stand__with_mean': True, 'preprocess__stand__with_std': True, 'model__base_score': 0.5, 'model__booster': 'gbtree', 'model__colsample_bylevel': 1, 'model__colsample_bynode': 1, 'model__colsample_bytree': 1, 'model__gamma': 0.0797483704737714, 'model__learning_rate': 0.1, 'model__max_delta_step': 0, 'model__max_depth': 2, 'model__min_child_weight': 1, 'model__missing': nan, 'model__n_estimators': 85, 'model__n_jobs': 1, 'model__nthread': None, 'model__objective': 'binary:logistic', 'model__random_state': 0, 'model__reg_alpha': 0, 'model__reg_lambda': 1, 'model__scale_pos_weight': 0.4, 'model__seed': None, 'model__silent': None, 'model__subsample': 0.25, 'model__verbosity': 1, 'model__alpha': 0.4246715792610688, 'model__eta': 0.38116393902047846, 'model__lambda': 0.7070515345251172}
####################   xgb  END   #########################
