####################   lr    #########################
Testing on training set:
              precision    recall  f1-score   support

         0.0      0.900     0.840     0.869      3216
         1.0      0.850     0.906     0.877      3216

    accuracy                          0.873      6432
   macro avg      0.875     0.873     0.873      6432
weighted avg      0.875     0.873     0.873      6432

auc macro 0.947
confusion matrix
[[2703  513]
 [ 302 2914]]
Testing on validation set:
              precision    recall  f1-score   support

         0.0      0.445     0.510     0.476       143
         1.0      0.933     0.915     0.924      1072

    accuracy                          0.867      1215
   macro avg      0.689     0.713     0.700      1215
weighted avg      0.876     0.867     0.871      1215

auc macro 0.838
confusion matrix
[[ 73  70]
 [ 91 981]]
Parameters: {'memory': None, 'steps': [('preprocess', ColumnTransformer(remainder='passthrough',
                  transformers=[('stand', StandardScaler(),
                                 [1, 25, 17, 2, 26, 27, 28, 29, 30])],
                  verbose_feature_names_out=False)), ('model', LogisticRegression(C=9, class_weight='balanced', dual=True, max_iter=408,
                   solver='liblinear', warm_start=True))], 'verbose': False, 'preprocess': ColumnTransformer(remainder='passthrough',
                  transformers=[('stand', StandardScaler(),
                                 [1, 25, 17, 2, 26, 27, 28, 29, 30])],
                  verbose_feature_names_out=False), 'model': LogisticRegression(C=9, class_weight='balanced', dual=True, max_iter=408,
                   solver='liblinear', warm_start=True), 'preprocess__n_jobs': None, 'preprocess__remainder': 'passthrough', 'preprocess__sparse_threshold': 0.3, 'preprocess__transformer_weights': None, 'preprocess__transformers': [('stand', StandardScaler(), [1, 25, 17, 2, 26, 27, 28, 29, 30])], 'preprocess__verbose': False, 'preprocess__verbose_feature_names_out': False, 'preprocess__stand': StandardScaler(), 'preprocess__stand__copy': True, 'preprocess__stand__with_mean': True, 'preprocess__stand__with_std': True, 'model__C': 9, 'model__class_weight': 'balanced', 'model__dual': True, 'model__fit_intercept': True, 'model__intercept_scaling': 1, 'model__l1_ratio': None, 'model__max_iter': 408, 'model__multi_class': 'auto', 'model__n_jobs': None, 'model__penalty': 'l2', 'model__random_state': None, 'model__solver': 'liblinear', 'model__tol': 0.0001, 'model__verbose': 0, 'model__warm_start': True}
####################   lr  END   #########################
####################   knn    #########################
Testing on training set:
              precision    recall  f1-score   support

         0.0      0.886     1.000     0.939      3216
         1.0      1.000     0.871     0.931      3216

    accuracy                          0.935      6432
   macro avg      0.943     0.935     0.935      6432
weighted avg      0.943     0.935     0.935      6432

auc macro 0.998
confusion matrix
[[3216    0]
 [ 415 2801]]
Testing on validation set:
              precision    recall  f1-score   support

         0.0      0.250     0.594     0.352       143
         1.0      0.934     0.762     0.839      1072

    accuracy                          0.742      1215
   macro avg      0.592     0.678     0.596      1215
weighted avg      0.853     0.742     0.782      1215

auc macro 0.684
confusion matrix
[[ 85  58]
 [255 817]]
Parameters: {'memory': None, 'steps': [('preprocess', ColumnTransformer(remainder='passthrough',
                  transformers=[('stand', StandardScaler(),
                                 [1, 25, 17, 2, 26, 27, 28, 29, 30])],
                  verbose_feature_names_out=False)), ('model', KNeighborsClassifier(algorithm='ball_tree', leaf_size=54, n_neighbors=2))], 'verbose': False, 'preprocess': ColumnTransformer(remainder='passthrough',
                  transformers=[('stand', StandardScaler(),
                                 [1, 25, 17, 2, 26, 27, 28, 29, 30])],
                  verbose_feature_names_out=False), 'model': KNeighborsClassifier(algorithm='ball_tree', leaf_size=54, n_neighbors=2), 'preprocess__n_jobs': None, 'preprocess__remainder': 'passthrough', 'preprocess__sparse_threshold': 0.3, 'preprocess__transformer_weights': None, 'preprocess__transformers': [('stand', StandardScaler(), [1, 25, 17, 2, 26, 27, 28, 29, 30])], 'preprocess__verbose': False, 'preprocess__verbose_feature_names_out': False, 'preprocess__stand': StandardScaler(), 'preprocess__stand__copy': True, 'preprocess__stand__with_mean': True, 'preprocess__stand__with_std': True, 'model__algorithm': 'ball_tree', 'model__leaf_size': 54, 'model__metric': 'minkowski', 'model__metric_params': None, 'model__n_jobs': None, 'model__n_neighbors': 2, 'model__p': 2, 'model__weights': 'uniform'}
####################   knn  END   #########################
####################   lr    #########################
Testing on training set:
              precision    recall  f1-score   support

         0.0      0.849     0.845     0.847      3216
         1.0      0.846     0.850     0.848      3216

    accuracy                          0.847      6432
   macro avg      0.847     0.847     0.847      6432
weighted avg      0.847     0.847     0.847      6432

auc macro 0.930
confusion matrix
[[2719  497]
 [ 484 2732]]
Testing on validation set:
              precision    recall  f1-score   support

         0.0      0.365     0.622     0.460       143
         1.0      0.944     0.855     0.898      1072

    accuracy                          0.828      1215
   macro avg      0.655     0.739     0.679      1215
weighted avg      0.876     0.828     0.846      1215

auc macro 0.840
confusion matrix
[[ 89  54]
 [155 917]]
Parameters: {'memory': None, 'steps': [('preprocess', ColumnTransformer(remainder='passthrough',
                  transformers=[('stand', StandardScaler(),
                                 [1, 25, 17, 2, 26, 27, 28, 29, 30])],
                  verbose_feature_names_out=False)), ('model', LogisticRegression(C=9, class_weight='balanced', dual=True, max_iter=408,
                   solver='liblinear', warm_start=True))], 'verbose': False, 'preprocess': ColumnTransformer(remainder='passthrough',
                  transformers=[('stand', StandardScaler(),
                                 [1, 25, 17, 2, 26, 27, 28, 29, 30])],
                  verbose_feature_names_out=False), 'model': LogisticRegression(C=9, class_weight='balanced', dual=True, max_iter=408,
                   solver='liblinear', warm_start=True), 'preprocess__n_jobs': None, 'preprocess__remainder': 'passthrough', 'preprocess__sparse_threshold': 0.3, 'preprocess__transformer_weights': None, 'preprocess__transformers': [('stand', StandardScaler(), [1, 25, 17, 2, 26, 27, 28, 29, 30])], 'preprocess__verbose': False, 'preprocess__verbose_feature_names_out': False, 'preprocess__stand': StandardScaler(), 'preprocess__stand__copy': True, 'preprocess__stand__with_mean': True, 'preprocess__stand__with_std': True, 'model__C': 9, 'model__class_weight': 'balanced', 'model__dual': True, 'model__fit_intercept': True, 'model__intercept_scaling': 1, 'model__l1_ratio': None, 'model__max_iter': 408, 'model__multi_class': 'auto', 'model__n_jobs': None, 'model__penalty': 'l2', 'model__random_state': None, 'model__solver': 'liblinear', 'model__tol': 0.0001, 'model__verbose': 0, 'model__warm_start': True}
####################   lr  END   #########################
####################   knn    #########################
Testing on training set:
              precision    recall  f1-score   support

         0.0      0.868     1.000     0.929      3216
         1.0      1.000     0.847     0.917      3216

    accuracy                          0.924      6432
   macro avg      0.934     0.924     0.923      6432
weighted avg      0.934     0.924     0.923      6432

auc macro 0.999
confusion matrix
[[3216    0]
 [ 491 2725]]
Testing on validation set:
              precision    recall  f1-score   support

         0.0      0.247     0.643     0.357       143
         1.0      0.940     0.739     0.827      1072

    accuracy                          0.728      1215
   macro avg      0.593     0.691     0.592      1215
weighted avg      0.858     0.728     0.772      1215

auc macro 0.698
confusion matrix
[[ 92  51]
 [280 792]]
Parameters: {'memory': None, 'steps': [('preprocess', ColumnTransformer(remainder='passthrough',
                  transformers=[('stand', StandardScaler(),
                                 [1, 25, 17, 2, 26, 27, 28, 29, 30])],
                  verbose_feature_names_out=False)), ('model', KNeighborsClassifier(algorithm='ball_tree', leaf_size=54, n_neighbors=2))], 'verbose': False, 'preprocess': ColumnTransformer(remainder='passthrough',
                  transformers=[('stand', StandardScaler(),
                                 [1, 25, 17, 2, 26, 27, 28, 29, 30])],
                  verbose_feature_names_out=False), 'model': KNeighborsClassifier(algorithm='ball_tree', leaf_size=54, n_neighbors=2), 'preprocess__n_jobs': None, 'preprocess__remainder': 'passthrough', 'preprocess__sparse_threshold': 0.3, 'preprocess__transformer_weights': None, 'preprocess__transformers': [('stand', StandardScaler(), [1, 25, 17, 2, 26, 27, 28, 29, 30])], 'preprocess__verbose': False, 'preprocess__verbose_feature_names_out': False, 'preprocess__stand': StandardScaler(), 'preprocess__stand__copy': True, 'preprocess__stand__with_mean': True, 'preprocess__stand__with_std': True, 'model__algorithm': 'ball_tree', 'model__leaf_size': 54, 'model__metric': 'minkowski', 'model__metric_params': None, 'model__n_jobs': None, 'model__n_neighbors': 2, 'model__p': 2, 'model__weights': 'uniform'}
####################   knn  END   #########################
####################   nn    #########################
Testing on training set:
              precision    recall  f1-score   support

         0.0      0.919     0.796     0.853      3216
         1.0      0.820     0.929     0.871      3216

    accuracy                          0.863      6432
   macro avg      0.869     0.863     0.862      6432
weighted avg      0.869     0.863     0.862      6432

auc macro 0.943
confusion matrix
[[2561  655]
 [ 227 2989]]
Testing on validation set:
              precision    recall  f1-score   support

         0.0      0.489     0.448     0.467       143
         1.0      0.927     0.938     0.932      1072

    accuracy                          0.880      1215
   macro avg      0.708     0.693     0.700      1215
weighted avg      0.876     0.880     0.878      1215

auc macro 0.845
confusion matrix
[[  64   79]
 [  67 1005]]
Parameters: {'memory': None, 'steps': [('preprocess', ColumnTransformer(remainder='passthrough',
                  transformers=[('stand', StandardScaler(),
                                 [1, 25, 17, 2, 26, 27, 28, 29, 30])],
                  verbose_feature_names_out=False)), ('model', MLPClassifier(alpha=0.15765175415976684, early_stopping=True,
              hidden_layer_sizes=[123, 146],
              learning_rate_init=0.0051325500039257, max_iter=372,
              solver='sgd'))], 'verbose': False, 'preprocess': ColumnTransformer(remainder='passthrough',
                  transformers=[('stand', StandardScaler(),
                                 [1, 25, 17, 2, 26, 27, 28, 29, 30])],
                  verbose_feature_names_out=False), 'model': MLPClassifier(alpha=0.15765175415976684, early_stopping=True,
              hidden_layer_sizes=[123, 146],
              learning_rate_init=0.0051325500039257, max_iter=372,
              solver='sgd'), 'preprocess__n_jobs': None, 'preprocess__remainder': 'passthrough', 'preprocess__sparse_threshold': 0.3, 'preprocess__transformer_weights': None, 'preprocess__transformers': [('stand', StandardScaler(), [1, 25, 17, 2, 26, 27, 28, 29, 30])], 'preprocess__verbose': False, 'preprocess__verbose_feature_names_out': False, 'preprocess__stand': StandardScaler(), 'preprocess__stand__copy': True, 'preprocess__stand__with_mean': True, 'preprocess__stand__with_std': True, 'model__activation': 'relu', 'model__alpha': 0.15765175415976684, 'model__batch_size': 'auto', 'model__beta_1': 0.9, 'model__beta_2': 0.999, 'model__early_stopping': True, 'model__epsilon': 1e-08, 'model__hidden_layer_sizes': [123, 146], 'model__learning_rate': 'constant', 'model__learning_rate_init': 0.0051325500039257, 'model__max_fun': 15000, 'model__max_iter': 372, 'model__momentum': 0.9, 'model__n_iter_no_change': 10, 'model__nesterovs_momentum': True, 'model__power_t': 0.5, 'model__random_state': None, 'model__shuffle': True, 'model__solver': 'sgd', 'model__tol': 0.0001, 'model__validation_fraction': 0.1, 'model__verbose': False, 'model__warm_start': False}
####################   nn  END   #########################
####################   xgb    #########################
Testing on training set:
              precision    recall  f1-score   support

         0.0      0.872     0.952     0.911      3216
         1.0      0.948     0.861     0.902      3216

    accuracy                          0.907      6432
   macro avg      0.910     0.907     0.906      6432
weighted avg      0.910     0.907     0.906      6432

auc macro 0.979
confusion matrix
[[3063  153]
 [ 448 2768]]
Testing on validation set:
              precision    recall  f1-score   support

         0.0      0.390     0.671     0.494       143
         1.0      0.951     0.860     0.903      1072

    accuracy                          0.838      1215
   macro avg      0.671     0.766     0.699      1215
weighted avg      0.885     0.838     0.855      1215

auc macro 0.846
confusion matrix
[[ 96  47]
 [150 922]]
Parameters: {'memory': None, 'steps': [('preprocess', ColumnTransformer(remainder='passthrough',
                  transformers=[('stand', StandardScaler(),
                                 [1, 25, 17, 2, 26, 27, 28, 29, 30])],
                  verbose_feature_names_out=False)), ('model', XGBClassifier(alpha=0.07252521171400944, eta=0.26281541619692944,
              gamma=0.177075126333618, lambda=0.762381857279508, missing=nan,
              n_estimators=46, scale_pos_weight=0.4, subsample=0.5))], 'verbose': False, 'preprocess': ColumnTransformer(remainder='passthrough',
                  transformers=[('stand', StandardScaler(),
                                 [1, 25, 17, 2, 26, 27, 28, 29, 30])],
                  verbose_feature_names_out=False), 'model': XGBClassifier(alpha=0.07252521171400944, eta=0.26281541619692944,
              gamma=0.177075126333618, lambda=0.762381857279508, missing=nan,
              n_estimators=46, scale_pos_weight=0.4, subsample=0.5), 'preprocess__n_jobs': None, 'preprocess__remainder': 'passthrough', 'preprocess__sparse_threshold': 0.3, 'preprocess__transformer_weights': None, 'preprocess__transformers': [('stand', StandardScaler(), [1, 25, 17, 2, 26, 27, 28, 29, 30])], 'preprocess__verbose': False, 'preprocess__verbose_feature_names_out': False, 'preprocess__stand': StandardScaler(), 'preprocess__stand__copy': True, 'preprocess__stand__with_mean': True, 'preprocess__stand__with_std': True, 'model__base_score': 0.5, 'model__booster': 'gbtree', 'model__colsample_bylevel': 1, 'model__colsample_bynode': 1, 'model__colsample_bytree': 1, 'model__gamma': 0.177075126333618, 'model__learning_rate': 0.1, 'model__max_delta_step': 0, 'model__max_depth': 3, 'model__min_child_weight': 1, 'model__missing': nan, 'model__n_estimators': 46, 'model__n_jobs': 1, 'model__nthread': None, 'model__objective': 'binary:logistic', 'model__random_state': 0, 'model__reg_alpha': 0, 'model__reg_lambda': 1, 'model__scale_pos_weight': 0.4, 'model__seed': None, 'model__silent': None, 'model__subsample': 0.5, 'model__verbosity': 1, 'model__alpha': 0.07252521171400944, 'model__eta': 0.26281541619692944, 'model__lambda': 0.762381857279508}
####################   xgb  END   #########################
